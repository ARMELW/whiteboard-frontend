#!/usr/bin/env python3
"""
Exemple d'utilisation des donn√©es d'animation export√©es en JSON.

Ce script d√©montre comment charger et utiliser les donn√©es d'animation
pour recr√©er ou analyser l'animation dans d'autres applications.
"""

import json
import sys

def load_animation_data(json_path):
    """Charge les donn√©es d'animation depuis un fichier JSON."""
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        return data
    except FileNotFoundError:
        print(f"‚ùå Fichier non trouv√©: {json_path}")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"‚ùå Erreur de d√©codage JSON: {e}")
        sys.exit(1)

def print_animation_summary(data):
    """Affiche un r√©sum√© des donn√©es d'animation."""
    metadata = data['metadata']
    frames = data['animation']['frames_written']
    
    print("\n" + "="*60)
    print("R√âSUM√â DE L'ANIMATION")
    print("="*60)
    
    print(f"\nüìä M√©tadonn√©es:")
    print(f"  ‚Ä¢ R√©solution: {metadata['width']}x{metadata['height']}")
    print(f"  ‚Ä¢ FPS: {metadata['frame_rate']}")
    print(f"  ‚Ä¢ Taille de grille: {metadata['split_len']}")
    print(f"  ‚Ä¢ Taux de saut: {metadata['object_skip_rate']}")
    print(f"  ‚Ä¢ Nombre total de frames: {metadata['total_frames']}")
    print(f"  ‚Ä¢ Dimensions de la main: {metadata['hand_dimensions']['width']}x{metadata['hand_dimensions']['height']}")
    
    print(f"\nüé¨ S√©quence de dessin:")
    print(f"  ‚Ä¢ Frames enregistr√©es: {len(frames)}")
    if frames:
        first_frame = frames[0]
        last_frame = frames[-1]
        print(f"  ‚Ä¢ Premi√®re tuile dessin√©e: position grille {first_frame['tile_drawn']['grid_position']}")
        print(f"  ‚Ä¢ Derni√®re tuile dessin√©e: position grille {last_frame['tile_drawn']['grid_position']}")
        
        # Calculer la dur√©e de l'animation
        duration = len(frames) / metadata['frame_rate']
        print(f"  ‚Ä¢ Dur√©e estim√©e du dessin: {duration:.2f} secondes")
    
    print("\n" + "="*60)

def analyze_drawing_path(data):
    """Analyse le chemin de dessin et affiche des statistiques."""
    frames = data['animation']['frames_written']
    metadata = data['metadata']
    
    print("\n" + "="*60)
    print("ANALYSE DU CHEMIN DE DESSIN")
    print("="*60)
    
    if not frames:
        print("Aucune frame √† analyser.")
        return
    
    # Calculer la distance totale parcourue par la main
    total_distance = 0
    for i in range(1, len(frames)):
        prev_pos = frames[i-1]['hand_position']
        curr_pos = frames[i]['hand_position']
        
        dx = curr_pos['x'] - prev_pos['x']
        dy = curr_pos['y'] - prev_pos['y']
        distance = (dx**2 + dy**2) ** 0.5
        total_distance += distance
    
    print(f"\nüìè Distance totale parcourue par la main: {total_distance:.2f} pixels")
    print(f"üìè Distance moyenne entre frames: {total_distance / (len(frames) - 1):.2f} pixels")
    
    # Calculer les limites du mouvement de la main
    x_positions = [f['hand_position']['x'] for f in frames]
    y_positions = [f['hand_position']['y'] for f in frames]
    
    print(f"\nüìç Zone de dessin:")
    print(f"  ‚Ä¢ X: {min(x_positions)} ‚Üí {max(x_positions)} (√©tendue: {max(x_positions) - min(x_positions)} pixels)")
    print(f"  ‚Ä¢ Y: {min(y_positions)} ‚Üí {max(y_positions)} (√©tendue: {max(y_positions) - min(y_positions)} pixels)")
    
    print("\n" + "="*60)

def export_drawing_sequence(data, output_file):
    """Exporte la s√©quence de dessin dans un format simplifi√©."""
    frames = data['animation']['frames_written']
    
    sequence = []
    for frame in frames:
        sequence.append({
            'frame': frame['frame_number'],
            'position': frame['hand_position'],
            'tile': frame['tile_drawn']['grid_position']
        })
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(sequence, f, indent=2)
    
    print(f"\n‚úÖ S√©quence de dessin export√©e vers: {output_file}")

def main():
    """Fonction principale."""
    if len(sys.argv) < 2:
        print("Usage: python use_animation_data.py <animation.json> [--export-sequence output.json]")
        sys.exit(1)
    
    json_path = sys.argv[1]
    
    # Charger les donn√©es
    print(f"üìÇ Chargement de: {json_path}")
    data = load_animation_data(json_path)
    
    # Afficher le r√©sum√©
    print_animation_summary(data)
    
    # Analyser le chemin
    analyze_drawing_path(data)
    
    # Exporter la s√©quence si demand√©
    if len(sys.argv) > 3 and sys.argv[2] == '--export-sequence':
        output_file = sys.argv[3]
        export_drawing_sequence(data, output_file)
    
    print("\n‚ú® Analyse termin√©e!\n")

if __name__ == '__main__':
    main()
